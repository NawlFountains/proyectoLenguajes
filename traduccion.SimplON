%%%% Traduccion de Principal.java, A. java, B.java, C.java y D.java

%%%---------------------------Creacion de Class Records—--------------------
	SetLabel CRA, Libre								%Creo que la etiqueta para la CR de A
	SetLibre Libre+1								%Actualizo libre segun el tamaño de la CRA
	SetActual Libre									%Actualizo actual

%%%--------------------------------------------------------------------------------------

%%%---------------------------Creacion de VTs—---------------------------------
%%% Carga la VT de la clase A
	SetLabel VTA, Libre								%Creo la etiqueta para la VT de A
	SetD Libre, initA	@VTA: direccion de initA	%Pongo en VTA la direccion de la version de init que usa A
	SetD Libre+1, m1A	@VTA: direccion de m1A		%Pongo en VTA la direccion de la version de m1 que usa A
	SetD Libre+2, m2A	@VTA: direccion de m2A		%Pongo en VTA la direccion de la version de m2 que usa A
	SetLibre Libre+4								%Actualizo libre segun el tamaño de la VTA
	SetActual Libre									%Actualizo actual

%%% Carga la VT de la clase B
	SetLabel VTB, Libre									%Creo la etiqueta para la VT de B
	SetD Libre, initB		@VTB: direccion de initB	%Pongo en VTB la direccion de la version de init que usa B
	SetD Libre+1, m1A		@VTB: direccion de m1A		%Pongo en VTB la direccion de la version de m1 que usa B
	SetD Libre+2, m2B		@VTB: direccion de m2B		%Pongo en VTB la direccion de la version de m2 que usa B
	SetD Libre+3, VTA		@VTB: direccion de la VTA	%Pongo en VTB la direccion de la VTB, ya que la extiende
	SetLibre Libre+5
	SetActual Libre

%%% Carga la VT de la clase C
	SetLabel VTC, Libre									%Creo la etiqueta para la VT de C
	SetD Libre, initC		@VTC: direccion de initC	%Pongo en VTC la direccion de la version de init que usa C
	SetD Libre+1, m1C		@VTC: direccion de m1C		%Pongo en VTC la direccion de la version de m1 que usa C
	SetD Libre+2, m2B		@VTC: direccion de m2B		%Pongo en VTC la direccion de la version de m2 que usa C
	SetD Libre+3, VTB		@VTC: direccion de la VTB	%Pongo en VTC la direccion de la VTB, ya que la extiende
	SetLibre Libre+5									%Actualizo libre segun el tamaño de la VTC
	SetActual Libre										%Actualizo actual

%%% Carga la VT de la clase D
	SetLabel VTD, Libre		%Creo la etiqueta para la VT de D
	SetD Libre, initD 		@VTD: direccion de initD	%Pongo en VTD la direccion de la version de init que usa D
	SetD Libre+1, m1D		@VTD: direccion de m1D		%Pongo en VTD la direccion de la version de m1 que usa D
	SetD Libre+2, m2D		@VTD: direccion de m2D		%Pongo en VTD la direccion de la version de m1 que usa D
	SetD Libre+3, VTB 		@VTD: direccion de la VTB	%Pongo en VTD la direccion de la VTB, ya que la extiende
	SetLibre Libre+5									%Actualizo libre segun el tamaño de la VTD
	SetActual Libre										%Actualizo actual
	


%%% Carga la VT de la clase Principal
	SetLabel VTPrincipal, Libre							%Creo la etiqueta para la VT de Principal , no tiene metodos pero tampoco es estatica
	SetLibre Libre+1									%Actualizo Libre segun el tamaño de la VT
	SetActual Libre										%Actualizo actual

%%%--------------------------------------------------------------------------------------


%%%---------------------------Codigo de inicialización—--------------------
	SetD Libre, pc+5            @PTR   					%Guardo puntero de retorno caigo en 
	SetD Libre+1, actual        @ED    					%Guardo enlace dinamico %main es estatico asi que no tien this!                                    
	SetActual Libre                    					%Muevo actual para que apunte al RA que acabo de crear para main
	SetLibre Actual+5                 					%Muevo libre segun el tamaño del RA de main (considerando las vars locales)
	Jump Main                           				%Salto al codigo de main
	Halt                                				%Cuando termino de ejecutar main finalizo

%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de initA() en clase A—--------------------
initA	SetH D[Actual+2]+1, 1	@v1=1					%Guardo el valor 1 en v1
		SetH D[Actual+2]+2, 2	@v2=2					%Guardo el valor 2 en v2
		SetD D[CRA]+1, 10		@a1=10					%Guardo el valor 10 en a1 estatico
		SetLibre Actual									%Limpio la memoria del RA de met1
		SetActual D[Libre+1]							%Muevo Actual a donde tenia enlace dinamico
		Jump D[Libre]									%Salto a la direccion de codigo que guarde en el puntero de retorno
%%%--------------------------------------------------------------------------------------


%%%---------------------------Traduccion de m1() en clase A—-----------------------------
m1A		JumpT PC+1, ((H[D[Actual+2]+1] + H[D[Actual+2]+2]) < (D[CRA+1] * 3))
		SetH D[Actual+2]+1, H[D[Actual+2]+1] + H[D[Actual+2]+2]	@v1 = v1 + v2
		SetH D[Actual+2]+2, H[D[Actual+2]+1] + 1				@v2 = v2 + 1
		JumpT PC+2, ((H[D[Actual+2]+1] + H[D[Actual+2]+2]) >= (D[CRA+1] * 3))	@(v1 + v2) < 3 * a1
		Jump PC-2
		SetD Actual-1, (H[D[Actual+2]+1] + H[D[Actual+2]+2])	@return v1 + v2	%Ponemos el resultado en el retorno esperado
		SetLibre Actual
		SetActual D[Libre+1]
		Jump D[Libre]
%%%--------------------------------------------------------------------------------------


%%%---------------------------Traduccion de m2() en clase A—--------------------
m2A		SetD Actual-1, ((H[D[Actual+2]+1]) + (H[D[Actual+2]+2])) + 3*D[CRA]
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de initB() en clase B—---------------------------
initB	SetD Libre, PC + 6		@PR
		SetD Libre+1, Actual		@ED
		SetD Libre+2, D[Actual+2]	@this
		Jump D[D[H[D[Actual+2]+0]+3]+0]		@super.init()			%Accedemos al this del RA, luego a su VTB, luego a la referencia de la VTA y alli al initA
		SetH D[Actual+2]+3, (H[D[Actual+2]+1] + H[D[Actual+2]+1]) * 3	@v3 = (v1 + v2) * 3
		SetH D[Actual+2]+4, H[D[Actual+2]+3] + D[CRA+1]	@v4 = v3 * a1
		SetLibre Actual
		SetActual D[Libre+1]
		Jump D[Libre]
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de m2() en clase b—--------------------
m2B		SetD Libre, PC + 6
		SetD Libre+1, Actual
		SetD Libre+2, D[Actual+2]
		Jump D[D[H[D[Actual+2]+0]+3]+0]		@super.init()			%Accedemos al this del RA, luego a su VTB, luego a la referencia de la VTA y alli m2()
		SetLibre Actual
		SetActual D[Libre+1]
		Jump D[Libre]
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de initC() en clase C—---------------------------
initC	SetD Libre, PC + 7		@PR
		SetD Libre+1, Actual		@ED
		SetD Libre+2, D[Actual+2]	@this
		Jump D[D[H[D[Actual+2]+0]+3]+2]		@super.init()			%Accedemos al this del RA, luego a su VTB, luego a la referencia de la VTA y alli al initA
		SetH D[Actual+2]+3, D[CRA+1] * 3	@v3 = a1 * 3
		SetH D[Actual+2]+4, D[CRA+1] * 4 + 1	@v4 = a1 * 4 + 1
		SetD Actual-1, ((D[Actual+4]) +  ((H[D[Actual+2]+1] + H[D[Actual+2]+3]+H[D[Actual+2]+4])/2))
		SetLibre Actual
		SetActual D[Libre+1]
		Jump D[Libre]
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de m1() en clase C—----------------------------
m1C		SetLibre Libre
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de initD() en clase D—---------------------------
initD	SetLibre Libre
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de m2() en clase D—----------------------------
m1D		SetLibre Libre
%%%--------------------------------------------------------------------------------------

%%%---------------------------Traduccion de m2() en clase D—----------------------------
m2D		SetLibre Libre
%%%--------------------------------------------------------------------------------------


%%%---------------------------Traduccion de main de la clase Principal—--------
	%% Leemos por pantalla el valor de x1
Main 	SetIn Actual+3	@x1=read()
	%% Leemos por pantalla el valor de x2
		SetIn Actual+4	@x2=read()

	%% Creamos le Objeto de clase D y lo guardamos en oA
		SetD Actual+2, PO	@v= new D()		%Guardo en oA una referencia al objeto que creo
		SetH PO, VTD		@Obj. Clase D - VTB	%Le agrego la VT al nuevo objeto
		SetPO PO+5							%Incremento el PO Segun el tamaño del objeto que cree

	%% Traduccion llamada oA.init(x1+x2)
		SetD Libre, PC+7	@PTR
		SetD Libre+1, Actual	@ED
		SetD Libre+2, D[Actual+2]	@This
		SetD Libre+3, (D[Actual+3] + D[Actual+4])
		SetActual Libre
		SetLibre Actual+4
		Jump D[H[D[Actual+2]+0]+0]

	%% Traduccion llamada y reserva para retorno de oA.m2(x1,x2)
		SetLibre Libre+1	@Lugar Retorno
		SetD Libre, PC + 6	@PTR
		SetD Libre+1, Actual	@ED
		SetD Libre+2, D[Actual+2]	@This
		SetD Libre+3, D[Actual+3]	@x1
		SetD Libre+4, D[Actual+4]	@x2
		SetActual Libre
		SetLibre Actual+4
		Jump D[H[D[Actual+2]+0]+2]

	%% Traduccion del print del resultado previo
		SetOut D[Libre-1]
		SetLibre Libre-1
	
	%% Retorno de main
		SetLibre Actual
		SetActual D[Libre+1]
		Jump D[Libre]
%%%--------------------------------------------------------------------------------------
